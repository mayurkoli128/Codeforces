
let's consider an array first : to find max (sum (i*Arr[i]))
    array =>    6 5 4 3 2 1 0

                0 1 2 3 4 5 6 -> iteration first
                6 0 1 2 3 4 5 -> iteration second...so on...
                5 6 0 1 2 3 4
                4 5 6 0 1 2 3 
                3 4 5 6 0 1 2 
                2 3 4 5 6 0 1
                1 2 3 4 5 6 0

note : i referred x*2 as => 2 instances of "x".
first we need array sum to calculate the value of each iteration in constant time, how let's see. 
ok, what sum of an array is representing?
ans : addition of each instance of arr[i], isn't it?

some observation :

array_sum = 21 

first iteration -> 6*0 + 5*1 + 4*2 + 3*3 + 2*4 + 1*5 + 0*6 => 35 -> lets denote it by "PREV"
second iteration-> 6*6 + 5*0 + 4*1 + 3*2 + 2*3 + 1*4 + 0*5 => 54

above representation of each term is nothing but arr[i] * (number of instances).

let's observe how 2nd iteration is depend on 1st one (note we are finding the value of nth iteration by using (n-1)th iteration).

in a second iteration instances of 6 has increase from 0 to 6 while for rest of the array elements (5,4,3,2,1,0) instances has reduced by 1.

let's find value of 2nd iteration using ==> PREV + arr[i-1]*(N-1) - (SUM-arr[i - 1]) (note value of i will be 1 in second iteration).
instances of 6 in first iteration is 0 so we need to add 6 instance in PREV.
picture now -> 6*6 + 6*0 + 5*1 + 4*2 + 3*3 + 2*4 + 1*5 + 0*6

after that we need to substract each instances of (5,4,3,2,1 & 0)
now -> (6*6 + 6*0 + 5*1 + 4*2 + 3*3 + 2*4 + 1*5 + 0*6) - (SUM)
but wait SUM also contain each instance of 6 so we need to substract it from SUM.
now -> (6*6 + 6*0 + 5*1 + 4*2 + 3*3 + 2*4 + 1*5 + 0*6) - (SUM - arr[i-1]) -> final ans of 2nd iteration;

so on for 3rd , 4th, .. iteration...